import tkinter as tk
from tkinter import messagebox, font
import psycopg2

class ConexiónRemota:
    def __init__(self, master):
        self.master = master
        master.title("Conexión remota Postgresql")
        master.configure(bg="#f0f0f0")  # Color de fondo

        # Estilo de fuente
        self.custom_font = font.Font(family="Helvetica", size=12)

        self.interfaz()

    def interfaz(self):
        # Etiquetas y entradas
        labels = ["ID Persona:", "Nombres:", "Apellidos:", "Base de datos:", "Usuario:", "Contraseña:", "Máquina:", "Puerto:"]
        self.entries = []

        for i, label in enumerate(labels):
            lbl = tk.Label(self.master, text=label, bg="#f0f0f0", font=self.custom_font)
            lbl.grid(row=i, column=0, padx=10, pady=5, sticky="e")
            entry = tk.Entry(self.master, font=self.custom_font)
            entry.grid(row=i, column=1, padx=10, pady=5)
            self.entries.append(entry)

        # Botones
        button_texts = ["Insert (C-Create)", "Select (R-Retrieval)", "Update (U-Update)", "Delete (D-Delete)"]
        commands = [self.insert, self.select, self.update, self.delete]

        for i, (text, command) in enumerate(zip(button_texts, commands)):
            button = tk.Button(self.master, text=text, command=command, bg="#4CAF50", fg="white", font=self.custom_font)
            button.grid(row=8, column=i, padx=10, pady=10, sticky="ew")

        # Ajustar el tamaño de las columnas
        for i in range(4):
            self.master.grid_columnconfigure(i, weight=1)

    def connect_db(self):
        try:
            connection = psycopg2.connect(
                database=self.entries[3].get(),
                user=self.entries[4].get(),
                password=self.entries[5].get(),
                host=self.entries[6].get(),
                port=self.entries[7].get()
            )
            return connection
        except Exception as e:
            messagebox.showerror("Error", f"Error en la conexión: {e}")
            return None

    def insert(self):
        connection = self.connect_db()
        if connection:
            cursor = connection.cursor()
            try:
                cursor.execute("INSERT INTO persona (idpersona, nombrespersona, apellidospersona) VALUES (%s, %s, %s)",
                               (self.entries[0].get(), self.entries[1].get(), self.entries[2].get()))
                connection.commit()
                messagebox.showinfo("Success", "Inserción realizada con éxito")
            except Exception as e:
                messagebox.showerror("Error", f"Error en la inserción: {e}")
            finally:
                cursor.close()
                connection.close()

    def select(self):
        connection = self.connect_db()
        if connection:
            cursor = connection.cursor()
            try:
                cursor.execute("SELECT nombrespersona, apellidospersona FROM persona WHERE idpersona = %s",
                            (self.entries[0].get(),))
                result = cursor.fetchone()
                if result:
                    self.entries[1].delete(0, tk.END)
                    self.entries[1].insert(0, result[0])
                    self.entries[2].delete(0, tk.END)
                    self.entries[2].insert(0, result[1])
                else:
                    messagebox.showinfo("Info", "No hay nadie con ese código.")
            except Exception as e:
                messagebox.showerror("Error", f"Error en la selección: {e}")
            finally:
                cursor.close()
                connection.close()

    def update(self):
        connection = self.connect_db()
        if connection:
            cursor = connection.cursor()
            try:
                cursor.execute("UPDATE persona SET nombrespersona = %s, apellidospersona = %s WHERE idpersona = %s",
                               (self.entries[1].get(), self.entries[2].get(), self.entries[0].get()))
                connection.commit()
                messagebox.showinfo("Success", "Registro actualizado con éxito")
            except Exception as e:
                messagebox.showerror("Error", f"Error en la actualización: {e}")
            finally:
                cursor.close()
                connection.close()

    def delete(self):
        connection = self.connect_db()
        if connection:
            cursor = connection.cursor()
            try:
                cursor.execute("DELETE FROM persona WHERE idpersona = %s", (self.entries[0].get(),))
                connection.commit()
                messagebox.showinfo("Success", "Registro eliminado con éxito")
            except Exception as e:
                messagebox.showerror("Error", f"Error en la eliminación: {e}")
            finally:
                cursor.close()
                connection.close()

if __name__ == "__main__":
    root = tk.Tk()
    app = ConexiónRemota(root)
    root.mainloop()
